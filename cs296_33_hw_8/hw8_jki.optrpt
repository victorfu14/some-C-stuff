Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -std=c99 -O3 -xCORE-AVX512 -qopt-zmm-usage=high -qopt-report=5 -o hw8_jki

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/2=50.0%] hw8_jki.c(21,1)
  -> EXTERN: (24,12) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (38,19) rtclock() (isz = 16) (sz = 21)
    -> EXTERN: (12,12) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
    -> EXTERN: (13,20) printf(const char *__restrict__, ...)
  -> EXTERN: (48,36) dummy()
  -> EXTERN: (50,32) dummy()
  -> INLINE: (53,17) rtclock() (isz = 16) (sz = 21)
    -> EXTERN: (12,12) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
    -> EXTERN: (13,20) printf(const char *__restrict__, ...)
  -> EXTERN: (54,9) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (55,9) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (58,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (59,5) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at hw8_jki.c(25,5)
<Peeled loop for vectorization>
   remark #15388: vectorization support: reference res[i][j] has aligned access   [ hw8_jki.c(29,13) ]
   remark #15388: vectorization support: reference mat1[i][j] has aligned access   [ hw8_jki.c(30,13) ]
   remark #15388: vectorization support: reference mat2[i][j] has aligned access   [ hw8_jki.c(31,13) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.647
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 0.930 
   remark #15478: estimated potential speedup: 9.580 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at hw8_jki.c(25,5)
   remark #25420: Collapsed with loop at line 27 
   remark #15389: vectorization support: reference res[i][j] has unaligned access   [ hw8_jki.c(29,13) ]
   remark #15389: vectorization support: reference mat1[i][j] has unaligned access   [ hw8_jki.c(30,13) ]
   remark #15388: vectorization support: reference mat2[i][j] has aligned access   [ hw8_jki.c(31,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.067
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 0.930 
   remark #15478: estimated potential speedup: 9.580 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2500

   LOOP BEGIN at hw8_jki.c(27,9)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at hw8_jki.c(25,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference res[i][j] has unaligned access   [ hw8_jki.c(29,13) ]
   remark #15389: vectorization support: reference mat1[i][j] has unaligned access   [ hw8_jki.c(30,13) ]
   remark #15388: vectorization support: reference mat2[i][j] has aligned access   [ hw8_jki.c(31,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.739
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 0.930 
   remark #15478: estimated potential speedup: 9.580 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at hw8_jki.c(35,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at hw8_jki.c(40,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=200

      LOOP BEGIN at hw8_jki.c(42,13)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=200

         LOOP BEGIN at hw8_jki.c(44,17)
            remark #15416: vectorization support: non-unit strided store was generated for the variable <res[i][j]>, stride is 200   [ hw8_jki.c(46,21) ]
            remark #15415: vectorization support: non-unit strided load was generated for the variable <res[i][j]>, stride is 200   [ hw8_jki.c(46,21) ]
            remark #15415: vectorization support: non-unit strided load was generated for the variable <mat1[i][k]>, stride is 200   [ hw8_jki.c(46,34) ]
            remark #15305: vectorization support: vector length 16
            remark #15309: vectorization support: normalized vectorization overhead 0.010
            remark #15300: LOOP WAS VECTORIZED
            remark #15452: unmasked strided loads: 2 
            remark #15453: unmasked strided stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 8 
            remark #15477: vector cost: 6.560 
            remark #15478: estimated potential speedup: 1.080 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=12
         LOOP END

         LOOP BEGIN at hw8_jki.c(44,17)
         <Remainder loop for vectorization>
            remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 0.218
            remark #15452: unmasked strided loads: 2 
            remark #15453: unmasked strided stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 8 
            remark #15477: vector cost: 6.560 
            remark #15478: estimated potential speedup: 1.080 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=200
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

hw8_jki.c(21,1):remark #34051: REGISTER ALLOCATION : [main] hw8_jki.c:21

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm7 k1-k3]
        
    Routine temporaries
        Total         :     144
            Global    :      59
            Local     :      85
        Regenerable   :      55
        Spilled       :       8
        
    Routine stack
        Variables     :      36 bytes*
            Reads     :       6 [1.07e+04 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [5.54e+01 ~ 0.0%]
            Writes    :       3 [1.07e+04 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: rtclock()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (rtclock()) [2/2=100.0%] hw8_jki.c(9,1)
  -> EXTERN: (12,12) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (13,20) printf(const char *__restrict__, ...)


    Report from: Code generation optimizations [cg]

hw8_jki.c(9,1):remark #34051: REGISTER ALLOCATION : [rtclock] hw8_jki.c:9

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      19
            Global    :       8
            Local     :      11
        Regenerable   :       6
        Spilled       :       0
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [2.00e+00 ~ 8.4%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
